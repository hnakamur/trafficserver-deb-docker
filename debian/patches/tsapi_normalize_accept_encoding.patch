--- a/doc/admin-guide/plugins/lua.en.rst
+++ b/doc/admin-guide/plugins/lua.en.rst
@@ -1277,6 +1277,28 @@
 
 :ref:`TOP <admin-plugins-ts-lua>`
 
+ts.client_request.normalize_accept_encoding
+-----------------------------------------------
+**syntax:** *ts.client_request.normalize_accept_encoding(normalize_ae)*
+
+**context:** do_remap or do_global_read_request
+
+**description**: This function can be used to normalize the Accept-Encoding request header.
+
+Possible values for normalize_ae is the same as those for `proxy.config.http.normalize_ae` config.
+
+Here is an example:
+
+::
+
+    function do_remap()
+        ts.client_request.normalize_ae(3)
+        return 0
+    end
+
+
+:ref:`TOP <admin-plugins-ts-lua>`
+
 ts.http.set_cache_url
 ---------------------
 **syntax:** *ts.http.set_cache_url(KEY_URL)*
--- a/include/proxy/http/HttpTransactHeaders.h
+++ b/include/proxy/http/HttpTransactHeaders.h
@@ -78,6 +78,7 @@
   static bool is_request_proxy_authorized(HTTPHdr *incoming_hdr);
 
   static void normalize_accept_encoding(const OverridableHttpConfigParams *ohcp, HTTPHdr *header);
+  static void normalize_accept_encoding(int normalize_ae, HTTPHdr *header);
 
   static void remove_conditional_headers(HTTPHdr *outgoing);
   static void remove_100_continue_headers(HttpTransact::State *s, HTTPHdr *outgoing);
--- a/include/ts/ts.h
+++ b/include/ts/ts.h
@@ -2880,6 +2880,17 @@
    */
   int TSHttpParentTableGetEntryCount(TSHttpTxn txnp);
 
+  /**
+   * Normalize Accept Encoding request header.
+   *
+   * @param txnp the transaction pointer
+   * @param request the client request header. If null, use the transactions client request.
+   * @param normalize_ae Specifies normalization, if any, of Accept-Encoding: headers.
+   *
+   * @see https://docs.trafficserver.apache.org/en/latest/admin-guide/files/records.yaml.en.html
+   */
+  void TSHttpTxnNormalizeAcceptEncoding(TSHttpTxn txnp, TSMBuffer request, int normalize_ae);
+
 } // end namespace c
 
 template <typename T>
--- /dev/null
+++ b/plugins/lua/example/test_normalize_accept_encoding.lua
@@ -0,0 +1,33 @@
+--  Licensed to the Apache Software Foundation (ASF) under one
+--  or more contributor license agreements.  See the NOTICE file
+--  distributed with this work for additional information
+--  regarding copyright ownership.  The ASF licenses this file
+--  to you under the Apache License, Version 2.0 (the
+--  "License"); you may not use this file except in compliance
+--  with the License.  You may obtain a copy of the License at
+--
+--  http://www.apache.org/licenses/LICENSE-2.0
+--
+--  Unless required by applicable law or agreed to in writing, software
+--  distributed under the License is distributed on an "AS IS" BASIS,
+--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+--  See the License for the specific language governing permissions and
+--  limitations under the License.
+
+
+local NORMALIZE_AE = 0
+function __init__(argtb)
+    if (#argtb) < 1 then
+        ts.fatal(argtb[0] .. ' normalize_ae parameter required!!')
+        return -1
+    end
+    NORMALIZE_AE = tonumber(argtb[1])
+end
+
+function do_remap()
+    local before = ts.client_request.header['Accept-Encoding']
+    ts.client_request.normalize_accept_encoding(NORMALIZE_AE)
+    local after = ts.client_request.header['Accept-Encoding']
+    ts.debug(string.format('normalized accept-encoding, NORMALIZE_AE=%s, before=%s, after=%s', NORMALIZE_AE, before, after))
+    return 0
+end
--- a/plugins/lua/ts_lua_client_request.cc
+++ b/plugins/lua/ts_lua_client_request.cc
@@ -78,6 +78,9 @@
 static void ts_lua_inject_client_request_ssl_curve_api(lua_State *L);
 static int ts_lua_client_request_get_ssl_curve(lua_State *L);
 
+static void ts_lua_inject_client_request_normalize_accept_encoding(lua_State *L);
+static int ts_lua_client_request_normalize_accept_encoding(lua_State *L);
+
 void
 ts_lua_inject_client_request_api(lua_State *L)
 {
@@ -99,6 +102,7 @@
   ts_lua_inject_client_request_ssl_cipher_api(L);
   ts_lua_inject_client_request_ssl_protocol_api(L);
   ts_lua_inject_client_request_ssl_curve_api(L);
+  ts_lua_inject_client_request_normalize_accept_encoding(L);
 
   lua_setfield(L, -2, "client_request");
 }
@@ -1125,3 +1129,23 @@
 
   return 1;
 }
+
+static void
+ts_lua_inject_client_request_normalize_accept_encoding(lua_State *L)
+{
+  lua_pushcfunction(L, ts_lua_client_request_normalize_accept_encoding);
+  lua_setfield(L, -2, "normalize_accept_encoding");
+}
+
+static int
+ts_lua_client_request_normalize_accept_encoding(lua_State *L)
+{
+  int normalize_ae;
+  ts_lua_http_ctx *http_ctx;
+
+  GET_HTTP_CONTEXT(http_ctx, L);
+
+  normalize_ae = luaL_checkint(L, 1);
+  TSHttpTxnNormalizeAcceptEncoding(http_ctx->txnp, http_ctx->client_request_bufp, normalize_ae);
+  return 0;
+}
--- a/src/api/InkAPI.cc
+++ b/src/api/InkAPI.cc
@@ -47,6 +47,7 @@
 #include "proxy/HttpAPIHooks.h"
 #include "proxy/http/HttpSM.h"
 #include "proxy/http/HttpConfig.h"
+#include "proxy/http/HttpTransactHeaders.h"
 #include "proxy/PluginHttpConnect.h"
 #include "../iocore/net/P_Net.h"
 #include "../iocore/net/P_SSLNextProtocolAccept.h"
@@ -9591,3 +9592,22 @@
   return s->parent_params && s->parent_params->parent_table
     ? s->parent_params->parent_table->getEntryCount() : 0;
 }
+
+void
+tsapi::c::TSHttpTxnNormalizeAcceptEncoding(TSHttpTxn txnp, TSMBuffer request, int normalize_ae)
+{
+  sdk_assert(sdk_sanity_check_txn(txnp) == TS_SUCCESS);
+  HttpSM *sm = (HttpSM *)txnp;
+  HTTPHdr *req;
+
+  // We allow for either request to be empty, in
+  // which case we default to the transactions request.
+  if (request) {
+    sdk_assert(sdk_sanity_check_mbuffer(request) == TS_SUCCESS);
+    req = reinterpret_cast<HTTPHdr *>(request);
+  } else {
+    req = &(sm->t_state.hdr_info.client_request);
+  }
+
+  HttpTransactHeaders::normalize_accept_encoding(normalize_ae, req);
+}
--- a/src/proxy/http/HttpTransactHeaders.cc
+++ b/src/proxy/http/HttpTransactHeaders.cc
@@ -1168,10 +1168,8 @@
 }
 
 void
-HttpTransactHeaders::normalize_accept_encoding(const OverridableHttpConfigParams *ohcp, HTTPHdr *header)
+HttpTransactHeaders::normalize_accept_encoding(int normalize_ae, HTTPHdr *header)
 {
-  int normalize_ae = ohcp->normalize_ae;
-
   if (normalize_ae) {
     MIMEField *ae_field = header->field_find(MIME_FIELD_ACCEPT_ENCODING, MIME_LEN_ACCEPT_ENCODING);
 
@@ -1226,6 +1224,12 @@
 }
 
 void
+HttpTransactHeaders::normalize_accept_encoding(const OverridableHttpConfigParams *ohcp, HTTPHdr *header)
+{
+  HttpTransactHeaders::normalize_accept_encoding(ohcp->normalize_ae, header);
+}
+
+void
 HttpTransactHeaders::add_connection_close(HTTPHdr *header)
 {
   MIMEField *field = header->field_find(MIME_FIELD_CONNECTION, MIME_LEN_CONNECTION);
